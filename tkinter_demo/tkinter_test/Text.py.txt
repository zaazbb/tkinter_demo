
text = Text(parent, width=40, height=10)

# The Basics
# Providing Initial Content
text.insert('1.0', 'here is my text to insert')

# Retrieving the Text
thetext = text.get('1.0', 'end')

# Modifying the Text in Code
# Text Positions and Indices

# "1.0" (first line, first character)

##    Here are a few additional examples of indices, and what they mean:
##    3.end	The newline at the end of line 3.
##    1.0 + 3 chars	Three characters past the start of line 1.
##    2.end -1 chars	The last character before the new line in line 2.
##    end -1 chars	The newline that Tk always adds at the end of the text.
##    end -2 chars	The actual last character of the text.
##    end -1 lines	The start of the last actual line of text.
##    2.2 + 2 lines	The third character (index 2) of the fourth line of text.
##    2.5 linestart	The first character of line 2.
##    2.5 lineend	The position of the newline at the end of line 2.
##    2.5 wordstart	The first character of the word containing the character
##                    at index 2.5.
##    2.5 wordend	The first character just past the last character of
##                    the word containing index 2.5.

Some additional things to keep in mind:

##        The term "chars" can be abbreviated as "c", and "lines" as "l".
##        You can omit the spaces between the terms, e.g. "1.0+3c".
##        If you specify an index past the end of the widget (e.g. "end + 100c")
##    it will be interpreted as the end.
##        Adding characters will wrap to the next lines as needed;
##    e.g. "1.0 + 10 chars" on a line with only five characters will end up
##    being on the second line.
##        When using indices containing multiple words, make sure to quote them
##    appropriately so that Tk sees the entire index as a single argument.
##        When moving up or down a certain number of lines, this is interpreted
##    as logical lines, where each line is terminated only by the "\n".
##    With long lines and wrapping enabled, this may be represent multiple lines
##    on the display. If you'd like to move up or down a single line on the display,
##    you can specify this as e.g. "1.0 + 2 display lines".
##        To determine the actual canonical position of an index,
##    use the "index" method, passing it the index expression,
##    and it will return the corresponding index in the form "line.char".
##        You can compare two indices using the "compare" method,
##    which lets you check for equality, whether one index is later
##    in the text than the other, etc.

# Deleting Text
text.delete('1.0', '2.0')

# Example: Logging Window
from tkinter import *
from tkinter import ttk

root = Tk()
log = Text(root, state='disabled', width=80, height=24, wrap='none')
log.grid()

def writeToLog(msg):
    numlines = log.index('end - 1 line').split('.')[0]
    log['state'] = 'normal'
    if numlines==24:
        log.delete(1.0, 2.0)
    if log.index('end-1c')!='1.0':
        log.insert('end', '\n')
    log.insert('end', msg)
    log['state'] = 'disabled'

# Formatting with Tags
# Adding Tags to Text
text.tag_add('highlightline', '5.0', '6.0')

text.insert('end', 'new material to insert',
            ('highlightline', 'recent', 'warning'))

# Applying Formatting to Tags
text.tag_configure('highlightline', background='yellow',
                   font='helvetica 14 bold', relief='raised')

# The currently available configuration options for tags are:
# "background", "bgstipple", "borderwidth", "elide", "fgstipple",
# "font", "foreground", "justify", "lmargin1", "lmargin2", "offset",
# "overstrike", "relief", "rmargin", "spacing1", "spacing2", "spacing3",
# "tabs", "tabstyle", "underline", and "wrap". 


# Differences between Tags in Canvas and Text Widgets
# In canvas widgets, individual canvas items have configuration options
# that control their appearance. When you refer to a tag in a canvas,
# the meaning of that is identical to "all canvas items presently having
# that tag". The tag itself doesn't exist as a separate object.
# So in the following snippet, the last rectangle added will not be colored red. 
canvas.itemconfigure('important', fill='red')
canvas.create_rectangle(10, 10, 40, 40, tags=('important'))

# In text widgets by contrast, it's not the individual characters
# that retain the state information about appearance, but tags,
# which are objects in their own right. So in this snippet,
# the newly added text will be colored red.
text.insert('end', 'first text', ('important'))
text.tag_configure('important', foreground='red')
text.insert('end', 'second text', ('important'))

# Events and Bindings
text.tag_bind('important', '<1>', popupImportantMenu)

# Images and Widgets
flowers = PhotoImage(file='flowers.gif')
text.image_create('sel.first', image=flowers)

b = ttk.Button(text, text='Push Me')
text.window_create('1.0', window=b)


